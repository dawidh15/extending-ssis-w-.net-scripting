<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/12/2021 9:17:07 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PEQUE06"
  DTS:CreatorName="PEQUE06\Asus VivoBook"
  DTS:DTSID="{0BAA3F35-21D1-4429-B684-FE18AE1250AC}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.132"
  DTS:LocaleID="5130"
  DTS:ObjectName="E03-Encryption"
  DTS:PackageType="5"
  DTS:VersionBuild="2"
  DTS:VersionGUID="{87925508-1E60-4F1A-BDC5-11A0B11260F3}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[MyProducts]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{F3D4B2A5-2CA4-480B-BAA7-650F89A8F7D4}"
      DTS:ObjectName="MyProducts">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="5130"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\localRepos\ssis_dotnet\Ch08\products.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="ProductId"
              DTS:DTSID="{09C2AE02-0DCA-4FB5-9132-6594D158791D}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="ProductName"
              DTS:DTSID="{16078592-0B3E-4DE2-A78A-353F4528039D}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Color"
              DTS:DTSID="{7354EBA5-6468-462D-8AFE-FCE2388AA313}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[MyProducts_Decrypted]"
      DTS:CreationName="FILE"
      DTS:DTSID="{20A309E5-22F1-4CA1-A024-2883C2E32778}"
      DTS:ObjectName="MyProducts_Decrypted">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:FileUsageType="1"
          DTS:ConnectionString="C:\localRepos\ssis_dotnet\Ch08\MyProducts_Decrypted.csv" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[MyProducts_Encrypted]"
      DTS:CreationName="FILE"
      DTS:DTSID="{0B356226-8ED8-4A92-970F-405E22BF00CA}"
      DTS:ObjectName="MyProducts_Encrypted">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:FileUsageType="1"
          DTS:ConnectionString="C:\localRepos\ssis_dotnet\Ch08\products_encrypted.csv" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="Encrypt and decrypt files"
      DTS:DTSID="{7A2EC3F8-39DF-4BE3-8403-F18BD53EF3C1}"
      DTS:ObjectName="Password"
      DTS:Sensitive="True">
      <DTS:Property
        DTS:Name="ParameterValue">
        <DTS:Property
          DTS:DataType="8"
          DTS:Name="ParameterValue"
          Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAjPuJIh0GpUKcNk8l101IFAAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAACzw23UaygAxBKmVRUR2WLLAS+gII6f+tl5Kf2K+Y3wgQAAAAAOgAAAAAIAACAAAAC0Kgvf23Mk7Lg3bGPxzYN9JhJJukB4CFDFf5CnB4Q/tSAAAABVDeNGNdhfwE9cKDPeOTH0QNZLkD6/Ohw2nqoVHILWLEAAAAAVA3PfDJcra4krsEAA6U2yL6aKCzQVuXuFM0BatkHE5QcDuCVUxCH+4q0cCDwxKGqzKvXd0p+KJHUVRoP5LiCE</DTS:Property>
      </DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SCR-Encrypt File"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{71C8B488-A0D8-4543-819B-B490343221CA}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SCR-Encrypt File"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_11874bad94d54c67bdfb0d9587891450"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Package::Password">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_11874bad94d54c67bdfb0d9587891450.Properties.Settings.get_Default():ST_11874bad94d54c67bdfb0d9587891450.Properties.Sett" +
    "ings")]

namespace ST_11874bad94d54c67bdfb0d9587891450.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_11874bad94d54c67bdfb0d9587891450.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8e5d3170-d699-453b-87c8-19675591f5ca}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_11874bad94d54c67bdfb0d9587891450</RootNamespace>
    <AssemblyName>ST_11874bad94d54c67bdfb0d9587891450</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.IO;
#endregion

namespace ST_11874bad94d54c67bdfb0d9587891450
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>

        // Salt is some random data in addtion to a password
        // Protects against frequently used passwords.

        private static readonly byte[] SALT = new byte[] {0x26, 0xdc, 0x7a, 0xc5, 0xfe,
            0xad, 0xed, 0x7a, 0x64, 0xc5, 0xfe, 0x20, 0xaf, 0x4d, 0x08, 0x22, 0x3c };

        // Decrypt with Rijndael encryption
        public static void Decrypt(string fileIn, string fileOut, string Password)
        {
            // open file stream for encrypted source file
            using(FileStream fsIn = new FileStream(fileIn, FileMode.Open, FileAccess.Read))
            {
                // open filestream for decrypted file
                using (FileStream fsOut = new FileStream(fileOut, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    // create Key from password and SALT
                    Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(Password, SALT);

                    // create a symmetric algorithm with Rijndael
                    Rijndael alg = Rijndael.Create();

                    // Set Key and IV
                    alg.Key = pdb.GetBytes(32);
                    alg.IV = pdb.GetBytes(16);

                    // create CryptoStream
                    using (CryptoStream cs = new CryptoStream(fsOut, alg.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        // Initialize buffer and proces the input file in chunks
                        // This is done to avoid reading the whole file into memory
                        int bufferLength = 4096;
                        byte[] buffer = new byte[bufferLength];
                        int bytesRead;

                        do
                        {
                            // read chunk of data from the input file
                            bytesRead = fsIn.Read(buffer, 0, bufferLength);
                            // Decrypt
                            cs.Write(buffer, 0, bytesRead);
                        } while (bytesRead != 0);

                        //close everything
                        cs.Close();
                        fsOut.Close();
                        fsIn.Close();
                }
                }
            }
        }

        // Encrypt textfile with Rijndael encryption
        public static void Encrypt(string fileIn, string fileOut, string Password)
        {
            // Open filestream for source file
            using (FileStream fsIn = new FileStream(fileIn, FileMode.Open, FileAccess.Read))
            {
                // Open filestrem for encrypted file
                using (FileStream fsOut = new FileStream(fileOut, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    // Create Key and IV
                    Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(Password, SALT);
                    // Create symmetric algorithm with Rijndael
                    Rijndael alg = Rijndael.Create();
                    // Set key and IV
                    alg.Key = pdb.GetBytes(32);
                    alg.IV = pdb.GetBytes(16);

                    //Create a cryptostream
                    using (CryptoStream cs = new CryptoStream(fsOut, alg.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        // Initialize a buffer and process the input file in chunks
                        // File can be huge, this is important
                        int bufferLength = 4096;
                        byte[] buffer = new byte[bufferLength];
                        int bytesRead;

                        do
                        {
                            // read chunk of data from the input file
                            bytesRead = fsIn.Read(buffer, 0, bufferLength);
                            // encrypt it
                            cs.Write(buffer, 0, bytesRead);
                        } while (bytesRead != 0);
                        //close all
                        cs.Close();
                        fsOut.Close();
                        fsIn.Close();
                    }
                }
            }
        }

        public void Main()
		{
            // Encrypt a file
            // Path of file to be encrypted
            string filepathSource = Dts.Connections["MyProducts"].AcquireConnection(null).ToString();
            // Get Path of encrypted file
            string filepathEncrypted = Dts.Connections["MyProducts_Encrypted"].AcquireConnection(null).ToString();
            // GetPassword
            string encryptionKey = Dts.Variables["$Package::Password"].GetSensitiveValue().ToString();
            //Create an encrypted copy of the file
            Encrypt(filepathSource, filepathEncrypted, encryptionKey);

            if (File.Exists(filepathEncrypted))
            {
                // Get path of decrypted file
                string filepathDecrypted = Dts.Connections["MyProducts_Decrypted"].AcquireConnection(null).ToString();
                Decrypt(filepathEncrypted, filepathDecrypted, encryptionKey);
                Dts.TaskResult = (int)ScriptResults.Success;

            } 
            else
            {
                // Fail component
                Dts.TaskResult = (int)ScriptResults.Failure;
                Dts.Events.FireError(0, "ERROR", "Encrypted file not found.", string.Empty, 0);
            }


			
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_11874bad94d54c67bdfb0d9587891450</msb:CodeName>
    <msb:DisplayName>ST_11874bad94d54c67bdfb0d9587891450</msb:DisplayName>
    <msb:ProjectId>{F614D40A-F30D-46F0-BDB6-33B28FA90BFB}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_11874bad94d54c67bdfb0d9587891450.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_11874bad94d54c67bdfb0d9587891450")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_11874bad94d54c67bdfb0d9587891450")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_11874bad94d54c67bdfb0d9587891450.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_11874bad94d54c67bdfb0d9587891450.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_11874bad94d54c67bdfb0d9587891450.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_11874bad94d54c67bdfb0d9587891450.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_11874bad94d54c67bdfb0d9587891450.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_11874bad94d54c67bdfb0d9587891450.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADSUS2AAAAAAAAAAAOAAIiALATAAABYAAAAIAAAAAAAAZjUA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABQ1AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAhBUAAAAgAAAAFgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAYAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABI
NQAAAAAAAEgAAAACAAUAgCMAANwQAAABAAAAAAAAAFw0AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBACyAAAAAQAAEQIZF3MQAAAKCgMaGHMQAAAKCwR+AQAA
BHMRAAAKDCgSAAAKDQkIHyBvEwAACm8UAAAKCQgfEG8TAAAKbxUAAAoHCW8WAAAKF3MXAAAKEwQg
ABAAABMFEQWNJAAAARMGBhEGFhEFbxgAAAoTBxEEEQYWEQdvGQAAChEHLeMRBG8aAAAKB28aAAAK
Bm8aAAAK3iARBCwHEQRvGwAACtwHLAYHbxsAAArcBiwGBm8bAAAK3CoAAAEoAAACAE8AQpEADAAA
AAACABIAi50ACgAAAAACAAkAnqcACgAAAAAbMAQAsgAAAAEAABECGRdzEAAACgoDGhhzEAAACgsE
fgEAAARzEQAACgwoEgAACg0JCB8gbxMAAApvFAAACgkIHxBvEwAACm8VAAAKBwlvHAAAChdzFwAA
ChMEIAAQAAATBREFjSQAAAETBgYRBhYRBW8YAAAKEwcRBBEGFhEHbxkAAAoRBy3jEQRvGgAACgdv
GgAACgZvGgAACt4gEQQsBxEEbxsAAArcBywGB28bAAAK3AYsBgZvGwAACtwqAAABKAAAAgBPAEKR
AAwAAAAAAgASAIudAAoAAAAAAgAJAJ6nAAoAAAAAEzAGANUAAAACAAARAigdAAAKbx4AAApyAQAA
cG8fAAAKFG8gAAAKbyEAAAoCKB0AAApvHgAACnIXAABwbx8AAAoUbyAAAApvIQAACgoCKB0AAApv
IgAACnJBAABwbyMAAApvJAAACm8hAAAKCwYHKAIAAAYGKCUAAAosNgIoHQAACm8eAAAKcmcAAHBv
HwAAChRvIAAACm8hAAAKDAYIBygBAAAGAigdAAAKFm8mAAAKKgIoHQAAChdvJgAACgIoHQAACm8n
AAAKFnKRAABwcp0AAHB+KAAAChZvKQAACiYqHgIoKgAACipiHxGNJAAAASXQBQAABCgrAAAKgAEA
AAQqHgIoLAAACiqufgIAAAQtHnLRAABw0AMAAAIoLQAACm8uAAAKcy8AAAqAAgAABH4CAAAEKhp+
AwAABCoeAoADAAAEKhp+BAAABCoeAigwAAAKKi5zCwAABoAEAAAEKkJTSkIBAAEAAAAAAAwAAAB2
NC4wLjMwMzE5AAAAAAUAbAAAAFgFAAAjfgAAxAUAAMAHAAAjU3RyaW5ncwAAAACEDQAARAEAACNV
UwDIDgAAEAAAACNHVUlEAAAA2A4AAAQCAAAjQmxvYgAAAAAAAAACAAABV52iIQkDAAAA+gEzABYA
AAEAAAAzAAAABwAAAAgAAAAMAAAABwAAADAAAAACAAAAEQAAAAEAAAACAAAAAgAAAAMAAAAEAAAA
AQAAAAEAAAAEAAAAAQAAAAIAAAAAAIoEAQAAAAAABgAkA/8FBgCzA/8FBgBwAuwFDwBzBgAABgCd
AksFBgAHA0sFBgDoAksFBgCaA0sFBgBEA0sFBgBdA0sFBgC0AksFBgDPAu4DCgB4AzAECgDUATAE
BgCyBKsABgC/BpAHBgBZBJAHBgC9BJAHBgD+BNMEBgBTAuwFBgA+B9MEBgB/BR8GBgBvBTYFDgAd
AnQEDgCEAnQEDgDwASEFBgA4Av8FBgCaAdMEBgAPAasABgADB6sABgDGBpAHBgDaBJAHBgDtBJAH
BgDDBKsABgAYAZAHBgDRA9MEBgAyAdMECgBiBDAEEgDoBnoBEgCPBXoBEgC1BnoBEgApAXoBBgB1
AasACgChBTAEBgAKBNMEBgD0Bv8FBgCCB9MEBgA+AdMEBgCfAdMEBgBRAdMEBgCxB0sFAAAAAIMA
AAAAAAEAAQABABAAFgUBADkAAQABAAAAEAAmBoIGVQACAAYAAAEQANsGggZpAAQACgAAAQAAjAAA
AFUABQANAAMBAAAeBwAATQAGAA0AEwEAACUAAABxAAkADQAxANQA9wARAAoF+wARAMQB/wARAP8A
AwEzAUIABwEGBuAACwFWgA4HDgFWgKQBDgFQIAAAAACWAGAHEgEBADghAAAAAJYAaAcSAQQAICIA
AAAAhgAcBQYABwABIwAAAACGGL8FBgAHAAkjAAAAAJEYxQUZAQcAIiMAAAAAgxi/BQYABwAqIwAA
AACTCHsFHQEHAFYjAAAAAJMIrAEiAQcAXSMAAAAAkwi4AScBBwBlIwAAAACWCEUHLQEIAGwjAAAA
AIYYvwUGAAgAdCMAAAAAkRjFBRkBCAAAAAEAAwUAAAIAcAcAAAMA9gAAAAEAAwUAAAIAcAcAAAMA
9gAAAAEA6AMJAL8FAQARAL8FBgAZAL8FCgApAL8FEAAxAL8FEAA5AL8FEABBAL8FEABJAL8FEABR
AL8FEABZAL8FEABhAL8FEABpAL8FBgChAL8FBgDJAL8FFQDZAL8FBgB5AL8FLACBAL8FNQCJABYC
PAD5ANIGQQABAYgHRwABAdkARwABAcwFTQCRAL8FUwARAfEAYAARATICaAARAQgCBgApAQ4CBgAB
AdwFTQBxABYHdgAxAeQGfAA5AcoEggBBAV0FiQCpAAgEjgAxAbEGkgBJAcoEmABRAdYDnwBZATcH
owAxAVEHAQAxASwHqABpAboHrgBhAbUFsQBxAL8FBgBxAXgHugCpAL8FBgCJAWMBxACJAa0HzQCx
AL8F0wDRAL8FBgAIABwA7QAIACAA8gApAHMAaQEuAAsAQQEuABMASgEuABsAaQEuACMAcgEuACsA
mwEuADMAmwEuADsAmwEuAEMAcgEuAEsAoQEuAFMAmwEuAFsAuAFDAGMA8gBJAHMAaQFjAGsA8gCB
AHsA8gCjAHsA8gABABEAAAAHABsAcAADAAEABAADAAAAfwUyAQAAzAE3AQAASQc8AQIABwADAAIA
CAAFAAEACQAFAAIACgAHAGw1AAAFAASAAAABAAAAPR5qSAAAAAAAAAEAAAAEAAAAAAAAAAAAAADb
AOgAAAAAAA8AAAAAAAAAAAAAAOQAEQQAAAAABAAAAAAAAAAAAAAA2wDTBAAAAAAPAAAAAAAAAAAA
AADkALUAAAAAAAAAAAABAAAAMAYAAAYAAgAHAAUAAAAAAABTVF8xMTg3NGJhZDk0ZDU0YzY3YmRm
YjBkOTU4Nzg5MTQ1MABfX1N0YXRpY0FycmF5SW5pdFR5cGVTaXplPTE3ADVGRUVCQTEzQkRGMjcx
QzYwNkJFRThCMjkzQkQwQTJGMURENDI1QTVGNEQxQUY1ODkyQjlEQUJFNTNBNjUyNTkAPE1vZHVs
ZT4APFByaXZhdGVJbXBsZW1lbnRhdGlvbkRldGFpbHM+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3Fs
U2VydmVyLk1hbmFnZWREVFMAU0FMVABzZXRfSVYAdmFsdWVfXwBtc2NvcmxpYgBSZWFkAFBhc3N3
b3JkAGRlZmF1bHRJbnN0YW5jZQBGaWxlTW9kZQBDcnlwdG9TdHJlYW1Nb2RlAFZhcmlhYmxlAElE
aXNwb3NhYmxlAFJ1bnRpbWVGaWVsZEhhbmRsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJv
bUhhbmRsZQBGaWxlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFsdWVUeXBlAEZh
aWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlw
dE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAENy
ZWF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAQnl0ZQBHZXRTZW5zaXRp
dmVWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3Jp
cHRUYXNrAFJpam5kYWVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABT
VF8xMTg3NGJhZDk0ZDU0YzY3YmRmYjBkOTU4Nzg5MTQ1MC5kbGwARmlsZVN0cmVhbQBDcnlwdG9T
dHJlYW0AZ2V0X0l0ZW0AU3lzdGVtAFN5bW1ldHJpY0FsZ29yaXRobQBJQ3J5cHRvVHJhbnNmb3Jt
AEVudW0AZmlsZUluAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
U3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24A
Q3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBFdmVudHNP
YmplY3RXcmFwcGVyAEZpcmVFcnJvcgAuY3RvcgAuY2N0b3IAQ3JlYXRlRGVjcnlwdG9yAENyZWF0
ZUVuY3J5cHRvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2
aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzExODc0YmFkOTRkNTRjNjdiZGZiMGQ5NTg3ODkxNDUw
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF8xMTg3NGJh
ZDk0ZDU0YzY3YmRmYjBkOTU4Nzg5MTQ1MC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAUmZjMjg5
OERlcml2ZUJ5dGVzAEdldEJ5dGVzAFNldHRpbmdzAGdldF9Db25uZWN0aW9ucwBSdW50aW1lSGVs
cGVycwBGaWxlQWNjZXNzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMA
RXhpc3RzAE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABEZWNyeXB0AEVuY3J5cHQA
ZmlsZU91dABJbml0aWFsaXplQXJyYXkAc2V0X0tleQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3Jh
cGh5AGdldF9Bc3NlbWJseQBFbXB0eQAAFU0AeQBQAHIAbwBkAHUAYwB0AHMAAClNAHkAUAByAG8A
ZAB1AGMAdABzAF8ARQBuAGMAcgB5AHAAdABlAGQAACUkAFAAYQBjAGsAYQBnAGUAOgA6AFAAYQBz
AHMAdwBvAHIAZAAAKU0AeQBQAHIAbwBkAHUAYwB0AHMAXwBEAGUAYwByAHkAcAB0AGUAZAAAC0UA
UgBSAE8AUgAAM0UAbgBjAHIAeQBwAHQAZQBkACAAZgBpAGwAZQAgAG4AbwB0ACAAZgBvAHUAbgBk
AC4AAHFTAFQAXwAxADEAOAA3ADQAYgBhAGQAOQA0AGQANQA0AGMANgA3AGIAZABmAGIAMABkADkA
NQA4ADcAOAA5ADEANAA1ADAALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBl
AHMAAADLVRxUcCa5Qbbo3/EKkTeQAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFhEAcIEj0SPRJB
EkUSSQgdBQgIIAMBDhF1EXkGIAIBDh0FBAAAEkUFIAEdBQgFIAEBHQUFIAASgIUMIAMBEoCJEoCF
EYCNByADCB0FCAgHIAMBHQUICAUHAw4ODgUgABKAmQUgABKAnQYgARKAoRwEIAEcHAMgAA4FIAAS
gKUGIAESgKkcAyAAHAQAAQIOBSAAEoCxAgYOCCAFAggODg4ICQACARKAvRGAwQgAARKAxRGAyQUg
ABKAzQcgAgEOEoDNCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGHQUDBhJZAwYSXQMGEhAD
BhEcAgYIAwYRGAYAAwEODg4DAAABBAAAElkEAAASXQUAAQESXQQAABIQBAgAElkECAASXQQIABIQ
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF8x
MTg3NGJhZDk0ZDU0YzY3YmRmYjBkOTU4Nzg5MTQ1MAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAy
MDIxAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuNwAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2Vz
LlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRy
YWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50
aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAADw1AAAAAAAAAAAAAFY1AAAAIAAA
AAAAAAAAAAAAAAAAAAAAAAAAAABINQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxs
AAAAAAD/JQAgABAm3HrF/q3temTF/iCvTQgiPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQBqSD0eAAABAGpIPR4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADEAMQA4ADcANABiAGEAZAA5ADQAZAA1ADQAYwA2ADcAYgBkAGYAYgAwAGQAOQA1ADgA
NwA4ADkAMQA0ADUAMAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3
ADcANAAxAC4AMQA4ADUAMwA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMA
VABfADEAMQA4ADcANABiAGEAZAA5ADQAZAA1ADQAYwA2ADcAYgBkAGYAYgAwAGQAOQA1ADgANwA4
ADkAMQA0ADUAMAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAA
QwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBh
AGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEA
bQBlAAAAUwBUAF8AMQAxADgANwA0AGIAYQBkADkANABkADUANABjADYANwBiAGQAZgBiADAAZAA5
ADUAOAA3ADgAOQAxADQANQAwAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUA
AAAAAFMAVABfADEAMQA4ADcANABiAGEAZAA5ADQAZAA1ADQAYwA2ADcAYgBkAGYAYgAwAGQAOQA1
ADgANwA4ADkAMQA0ADUAMAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEA
LgAwAC4ANwA3ADQAMQAuADEAOAA1ADMAOAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBl
AHIAcwBpAG8AbgAAADEALgAwAC4ANwA3ADQAMQAuADEAOAA1ADMAOAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABoNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="164,42"
          Id="Package\SCR-Encrypt File"
          TopLeft="48,56" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>